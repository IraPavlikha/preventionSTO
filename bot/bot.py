import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TELEGRAM_TOKEN = "7840749042:AAGA57FKu-6lqk81Zbzogwx0UL5kKdQ-sWA"
ADMIN_CHAT_ID = "7957686804"

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

reminder_users = set()
scheduler = AsyncIOScheduler()

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ –°–¢–û.\n"
                         "üìÖ /reminder - —É–≤—ñ–º–∫–Ω—É—Ç–∏ —â–æ–º—ñ—Å—è—á–Ω–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
                         "‚ùå /stopreminder - –≤–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è\n"
                         "üìû /support - –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")

# –£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
@dp.message(Command("reminder"))
async def enable_reminder(message: types.Message):
    reminder_users.add(message.from_user.id)
    await message.answer("‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–º—ñ—Å—è—á–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¢–û.")

# –í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
@dp.message(Command("stopreminder"))
async def disable_reminder(message: types.Message):
    reminder_users.discard(message.from_user.id)
    await message.answer("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å —Ä–∞–∑ –Ω–∞ –º—ñ—Å—è—Ü—å
async def send_reminders():
    for user_id in reminder_users:
        try:
            await bot.send_message(user_id, "üîî –ù–∞–≥–∞–¥—É—î–º–æ –ø—Ä–æ –ø—Ä–æ—Ñ—ñ–ª–∞–∫—Ç–∏–∫—É –Ω–∞ –°–¢–û!")
        except:
            pass

# –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
support_requests = {}

@dp.message(Command("support"))
async def request_support(message: types.Message):
    support_requests[message.from_user.id] = message.chat.id
    await bot.send_message(ADMIN_CHAT_ID, f"üì© –ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≤—ñ–¥ @{message.from_user.username}")
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º.")

@dp.message(lambda message: message.from_user.id in support_requests)
async def forward_to_admin(message: types.Message):
    await bot.send_message(ADMIN_CHAT_ID, f"üì® –ü–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ @{message.from_user.username}: {message.text}")

@dp.message(F.chat.id == int(ADMIN_CHAT_ID))
async def reply_to_user(message: types.Message):
    if message.reply_to_message:
        user_id = next((uid for uid, chat in support_requests.items() if chat == message.chat.id), None)
        if user_id:
            await bot.send_message(user_id, f"üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏: {message.text}")

async def main():
    scheduler.add_job(send_reminders, "interval", weeks=4)
    scheduler.start()  # –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —Å—é–¥–∏
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
